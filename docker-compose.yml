services:
  # MongoDB and Mongo Express
  mongodb:
    image: mongo:latest
    container_name: almajlis-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - almajlis-network

  mongo-express:
    image: mongo-express
    container_name: almajlis-mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
      ME_CONFIG_MONGODB_URL: ${ME_CONFIG_MONGODB_URL}
      ME_CONFIG_BASICAUTH: ${ME_CONFIG_BASICAUTH}
    depends_on:
      - mongodb
    networks:
      - almajlis-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: almajlis-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: ${MONGODB_URI}
      DISCORD_REDIRECT_URI: ${DISCORD_REDIRECT_URI}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      SESSION_SECRET: ${SESSION_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
    networks:
      - almajlis-network
    command: npm run dev

  # Dashboard Frontend
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.dev
    container_name: almajlis-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL}
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - almajlis-network
    command: npm run dev

  # Discord Bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile.dev
    container_name: almajlis-bot
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      MONGODB_URI: ${MONGODB_URI}
    volumes:
      - ./bot:/app
      - /app/node_modules
    depends_on:
      - mongodb
    networks:
      - almajlis-network
    command: npm run dev

volumes:
  mongo-data:
    driver: local

networks:
  almajlis-network:
    driver: bridge
